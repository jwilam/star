###classical item analysis for STAR 2.0
###25 July 2022 noon

rm(list=ls())

install.packages("CTT")
install.packages("mirt")
install.packages("WrightMap")

library("CTT")
library("mirt")
library("WrightMap")

#=============================#
# Load files
#=============================#

##set working directory
##Session > Set Working Directory > Choose Directory...

##load task and key excel files
##Environment > Import Dataset > From Excel... Browse > (import datasetlong.xlsx)
dataset <- read_excel("dataset.xlsx")
##Environment > Import Dataset > From Excel... Browse > (import itemkey.xlsx)
itemkey <- read_excel("itemkey.xlsx")

##prepare data file in long excel format
stardata <- function(dataset) {
  dataset.long <<- dataset[ , c("task_code", "user_id", "school_code", "class", "item_code", "score", "student_response")]
  long <<- 1
  }
stardata(dataset)

##prepare data file of single item in wide excel format
startask <- function(dataset) {
  dataset[,1] <- make.unique(as.character(data.frame(dataset)[,1])) 
  dataset.wide <- data.frame(dataset, row.names = 1)
  long <<- 0
  item_response <<- dataset.wide
}
startask(datawide)

##prepare task and item information from excel file
starkey <- function(tik) {
  taskitemkey <- data.frame(task_nm = tik[ , 1] ,
                            item_key = character(nrow(tik)))
  for (i in 1:nrow(tik)) {
    j <- as.character(tik[i,2:length(tik)])
    taskitemkey[i, 2] <- do.call(paste, c(as.list(j[!is.na(j)]), sep = ","))
  }
  taskitemkey <<- taskitemkey
}
starkey(itemkey)

#=============================#
# Do classical item analysis
#=============================#

##classical item analysis (cia)
cia <- function(task.nm, item.key, low=0.27, top=0.27, starschool="", starclass="") {
  
  cat("\n######################################\n")
  cat("## Coding by LAM Wai Ip, July 2022  ##")  
  cat("\n######################################\n")  
  
##set task.nm & item.key

    if (missing(task.nm)) {
    if (!exists("task_nm")) {
      task.nm <- 1
    } else {
      task.nm <- task_nm
      item.key <- item_key
    }
  }  
  
  if (is.numeric(task.nm)) {
    if (task.nm > nrow(taskitemkey)) {stop("There is/are only ", nrow(taskitemkey), " task(s) input.")}
    item.key <- taskitemkey[task.nm, 2]
    task.nm <- taskitemkey[task.nm, 1]
  }
  
  task_nm <<- task.nm
  item_key <<- item.key
  starschool <<- starschool
  starclass <<- starclass
  
  item.key <- toupper(item.key)
  item.key <- strsplit(item.key, ",", fixed = TRUE)[[1]]
  item.key[item.key=="NA"] <- ""
  
  full_length <<- length(item.key)
  mc <<- !item.key == ""
  item.key <- item.key[mc]

##subset the dataset.long  
  
if (long) {

if (! starschool == "" ) {
  dataset.long <- dataset.long[dataset.long$school_code == starschool , ]
}  

if (! starclass == "" ) {
  dataset.long <- dataset.long[dataset.long$class == starclass , ]
}  

dataset.long <- subset(dataset.long, task_code == task.nm , select = c("user_id", "item_code", "score", "student_response"))

if (nrow(dataset.long) == 0) {stop("No item is retreived, check if item name (ie task_code) is correct.")}

##extract id
id <- split(dataset.long$user_id, factor(dataset.long$item_code, levels=unique(dataset.long$item_code)))[[1]]
id <- make.unique(as.character(id))

##build response dataframe, preserve natural order of factors for split function
response_split <- split(dataset.long$student_response, factor(dataset.long$item_code, levels=unique(dataset.long$item_code)))
item_response <- as.data.frame(do.call(cbind, response_split))
row.names(item_response) <- id

}

##remove NA from item_response
item_response[is.na(item_response)] <- "missing" 

##build mc response dataframe
if (sum(mc) > 0) {
item_response_mc <<- item_response[mc]
}

##build constructed response dataframe
if (sum(!mc) >0) {
item_response_constr <<- item_response[!mc]
}

##score by CTT package, double confirm rm all NA from item.score
item_scoring <- score(item_response_mc, item.key, output.scored = TRUE, rel = TRUE)
item_score <<- as.data.frame(item_scoring$scored)
item_score[is.na(item_score)] <- 0 

##save item_response result to csv file, make sure no file with the same name is running 
write.csv(item_response, file = paste0(task.nm,starschool,starclass,".response.csv"))

##save scored result to csv file, make sure no file with the same name is running 
write.csv(item_score, file = paste0(task.nm,starschool,starclass,".scored.csv"))


##conduct classical item analysis
item_analysis <- itemAnalysis(item_score)
sem <- item_analysis$scaleSD * (sqrt(1-item_analysis$alpha))

##report classical item analysis
cat("\nItem Analysis on", format(Sys.time(), "%a %b %d %X %Y"))
cat("\n")

if (! starschool == "" ) {  cat("\nSchool:", starschool, "\n")  }
if (! starclass == "" ) {  cat("Class:", starclass, "\n")  }

cat("\nItem:",task.nm)
cat("\nMC Item key:", item.key, "\n")
cat("\nFull length of the test:", full_length,
    "\nNumber of MC items:", sum(mc),
    "\nMC items:",
    "\n")
print(colnames(item_response_mc))

##show distribution of scores
cat("\nDistribution of MC marks:",
    "\n=========================\n")
cat("\nTotal Number of students = ", length(id), "\n")
cat("\nUpper row: Scores",
    "\nLower row: Number of students")
hist(total <- as.data.frame(item_scoring$score)[,1],
     breaks = max(total),
     xlim = c(0, max(total)),
     main = c(paste("MC score distribution of", task.nm),
              paste(starschool, " ", starclass)),
     xlab = "MC scores",
     ylab = "Number of students")
plot(density(total),
     col = 2, lwd = 2,
     main = c(paste("MC score density of", task.nm),
              paste(starschool, " ", starclass)),
     xlab = "MC scoring",
     ylab = "Density of distribution")
print(table(total <- apply(item_score, 1, sum)))

if (nrow(item_score[total == sum(mc),]) == 0 ) {
  cat("\nNo student got full mark.\n")
  } else {
    cat("\nThe following", nrow(item_score[total == sum(mc),]), "students got the full", sum(mc), "marks in MC:\n")
    print(row.names(item_score[total == sum(mc),]))
}

cat("\nReliability report:",
    "\n===================\n",
    "\nMean = ", item_analysis$scaleMean,
    "\nReliability (alpha) = ", item_analysis$alpha, 
    "\nStandard Derviation (SD) = ", item_analysis$scaleSD,
    "\nStandard error of measurement (SEM) =", sem,
    "\n95% Confidence Interval (CI) = +/-", 1.96 * sem,
    "\n")

##if the measure is lengthened by a factor, the reliability of new test is:
cat("\nIf the test is in its full length, i.e.,", full_length, "items in total",
    "\nReliability is expected to be: ", spearman.brown(item_analysis$alpha, full_length/sum(mc), "n")[[1]],
    "\n")

## if we want a new measure of alpha to be 0.7, the new test length is:
if (item_analysis$alpha < 0.7) {
  cat("\nTo achieve new reliability =", 0.7, ", the length of mc is needed to be lengthened by:",
      "\n", spearman.brown(item_analysis$alpha, 0.7, "r")[[1]], "times.",
      "\n")
}

cat("\nItem Analysis:",
    "\n==============\n\n")  

print(item_analysis$itemReport)

cat("\nPlotting Reliability(alpha) and Point Biserial(pBis):",
    "\n=====================================================\n") 
cat("\nPlease refer to graphs on the Plots panel.\n")

##plot alphaIfDeleted
rel.contribution <- (2*item_analysis$alpha) - item_analysis$itemReport$alphaIfDeleted
dotchart( rel.contribution , 
          labels = item_analysis$itemReport$itemName, 
          main = c(paste("Reliability Contribution to", task.nm),
                   paste(starschool, " ", starclass)),
          xlab = "Alpha drop if item deleted",
          xlim = c(min(item_analysis$alpha, min(rel.contribution)),
                   max(item_analysis$alpha, max(rel.contribution)))
)
abline(v = item_analysis$alpha, col = "red",  lty = 3 )

##plot difficulty
dotchart( item_analysis$itemReport$itemMean , 
          labels = item_analysis$itemReport$itemName, 
          main = c(paste("Difficulty of", task.nm),
                   paste(starschool, " ", starclass)),
          xlab = "Item mean",
          xlim = c(0,1))
abline(v = 0.2, col = "red",  lty = 3 )
abline(v = 0.8, col = "red",  lty = 3 )

##plot item discrimination (pBis)
cvpb = 0.20  # critical value
dotchart(as.numeric(item_analysis$itemReport$pBis), 
         labels = colnames(item_scoring$scored) , 
         main = c(paste("Point biserial (pBis) discrimination of", task.nm),
                  paste(starschool, " ", starclass)),
         xlim = c(min(0,min(item_analysis$itemReport$pBis)),1) )
abline(v = cvpb, col = "red",  lty = 3 )
if (min(item_analysis$itemReport$pBis) < 0 ) {
  abline(v = 0, col = "red",  lty = 1 )
}

##report distract analysis
##bug: Error in cut.default(),  'breaks' are not unique. Try adjusting defineGroups to fix.
cat("\nDistractor Analysis:",
    "\n====================\n")  
mid <- 1- low-top
cat("\nDiscrimination cut-off:", low, ",", mid, ",", top, "\n\n")
print(distractorAnalysis(item_response_mc, item.key,  
                         defineGroups=c(low, mid, top), 
                         csvReport=paste0(task.nm,starschool,starclass,".da.csv")))

}
#cia()

#=============================#
# Run IRT
#=============================#

##analysis by item response theory (irt)
irt <- function() {
  
  cat("\nIRT Analysis on task: \n")
  cat("\n", task_nm, " ", starschool, " ", starclass, "\n\n")
  
  ## save another data frame
  mydata_irt <- item_score
  ## irt 2pl model
  mymodel <- mirt(mydata_irt, 1, itemtype = '2PL')
  print(coef(mymodel, IRTpars=TRUE, simplify=TRUE))
  print(itemfit(mymodel))
  ## plot
  print(plot(mymodel, type ='infoSE'))
  print(plot(mymodel, type ='trace'))
  print(plot(mymodel, type ='infotrace'))
  ## theta
  theta <- as.data.frame(fscores(mymodel, full.scores.SE = TRUE))
  mymodel_coefs <- coef(mymodel, IRTpars=TRUE, simplify=TRUE)
  wrightMap(theta[,1], mymodel_coefs$items[,2])
  
}
#irt()

#=============================#
# Display constructed response
#=============================#

##display constructed response content
display <- function(mark = sum(mc), item ) {
  total <- apply(item_score, 1, sum)
  cat("\nConstructed item(s):",  
      "\n====================\n")  
  cat("\n", task_nm, " ", starschool, " ", starclass, "\n")
  cat("\nDisplaying constructed response(s) of", 
      nrow(item_response_constr[total == mark, ]), 
      "student(s) who got", mark, "mark(s) in mc.\n")
  if (missing(item)) {
    for (i in 1:length(item_response_constr)) {
      cat("\n",i,") ",colnames(item_response_constr)[i])
    }
    View(item_response_constr[total == mark, , drop=FALSE])
  } else {
    if (max(item) > length(item_response_constr)) {stop("There is/are only ", length(item_response_constr), " item(s).")} 
    for (i in 1:length(item)) {
      cat("\n",item[i],") ",colnames(item_response_constr)[item[i]])
    }
    View(item_response_constr[total == mark, item, drop=FALSE])
  }
}
#display()
